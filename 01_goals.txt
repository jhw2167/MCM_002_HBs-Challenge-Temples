Requirements
---

1. Create challenge_temple nbt structure
---

2. compile and get challenge_temple to spawn in world
---


3. create challenge_base 2x2 chunk structure
---
	- The floors and walls of a challenge room
	- to be used as the default template for a challenge

4. Spawn challenge_base in super flat dimension
---
	- SKIPPED
	- we perhaps want each challenge_temple to be its own structure

	- HACK for grid placement of structures

	loadRegistryContents
	


5. Create a superflat single biom dimension to host challenges
---
	- Created, structures still spawn, trying to turn them off


6. Spawn immersive portal that can travel to external dimension
---

	1. Add immersive portal dependency
	---
	fabric based portal gun mod adds it like this:

	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${immptl_version}")
    	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${immptl_version}")
    	modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:build:${immptl_version}")

	  maven {
        	name = 'JitPack'
	        url = 'https://jitpack.io'
    	}

	immptl_version=v3.2.7-mc1.20.1


	2. Forge version
	---

7. Add API to common to call forge/fabric portals API dynamically
---

	- using Blay's PlatformProxy system


8. Remodel 2x2 temple room
---

	- prevent portal from spawning in one room 0x0
	- 

9. Add support for exit portal
---

	- create syntax for building end portal
		- Create sample of implementation to determine space needed
		- 8x8 torched off area
		- 6x6 area from bottom right, structure placed in positive x,y,z direction
		- floor of portal exit equals floor of ground where designating torches were placed
		-
	- save structure as an nbt
		- needs to be location agnostic, radial symmetry
	- dynamically locate soul torches after challenge replacement
		- y -1 offeset structure placement
	- after each temple reset:
		- find soul torches
		- save challengeExitPos and exitPortalPos and exitPortal
		- places challenge_exit_00.nbt
		- find soul torches again
		- delete existing exit portal
		- create new exit portal and save
		- on server restart, ensure to reset challenge
	- set challenge end portal dynamically

	CHALLENGE SUBMISSION VERIFICATION
	1. Challenge submission matches existing naming convention
	2. Challenge submisison contains only 4 soul torches
	3. 


10. Add support for temple refresh on portal death
---

	- Establish hook to player death
	- trigger challlenge rebuild on player death
	- Define chest locations
	- Create challenge_chest type that is not refilled on challenge reset
	- Chests are reflled on challenge reset
	- Challenge_chests are cleared on challenge reset after being opened


11.
---

	Create Challenge class to store challenge metaData and settings

	Challenge Info:
		CHALLENGE_DB/CHALLENGE_TEMPLATE.json

	ChallengeDB:
	challenges.csv - input file, adding new challenge authors and names
	challenges_updated.csv - db file containing real time file id of challenge.json, 
	author and challenge common name, also binary indicating whether this challenge should be used

	Challenge JSON:
	"difficulty": "PEACEFUL | EASY | NORMAL | HARD | VERY HARD",	//0-4
	"lootPool": "minor | standard | major | epic | lengendary",	//0-4

X	1. Update HBs foundation for new JSON loading functions
X	2. Complete loadChallenge method and handle exceptions
X	3. Create sample challengeJson files for 2x2 and 4x4 rooms
X	4. Create sample challengeJson for diamond and gold rooms
X	5. Create mappable enums to difficulty and loot pool strings
X	6. Ensure to save completed challengs to foundationDB, load on server start
X	7. Use size values to set loop for Challenge room s.t. we can parse for soul torches

X	8. Update gold and diamond rooms to include soul torches

	11. add new challenge blocks
	12. add chest witholding logic
	13. set spawn position to front of temple
	
	SEED: 234345

Blocks to map on startup:
	- soul torches
	- chests

	- Add challenge_water - grants regeneration, protection, blast protection to those who recently completed a challenge

	- challenge_bed - copy a normal red bed entity, unbreakable and blast resistant like bedrock
	- quantity_chest - player must place items in this chest, emits redstone signal upon programatic requirements that I will configure
	- challenge_chests - a copy of a normal chest with a different id

	- Add challenge_button - stone button
	- Add challenge_lamp - redstone lamp, always on
	- Add challenge_piston/sticky - can only be broken with create wrench


	- wool

	- challenge_tanks



12. To do
---

	hbs_challenge_temple:challenge_room_2x2
	hbs_challenge_temple:challenge_brick
	hbs_challenge_temple:challenge_glowstone
	/give @p minecraft:structure_block
	/give @s jigsaw
	hbs_challenge_temple:challenge_room_4x4_00


hbs_challenge_temple:challenge_room_4x4_00
- spawn 00, 00 contains 01-08, 
- _08 can replace everything else

	- add Challenge blocks - stone bricks, glowstone, glass, wood, leaves
	- use processor lists to edit structure NBT data
		- compile time nbt editor: https://offroaders123.github.io/Dovetail/

	- determine how to fix chests at runtime
	- refill chests on player death

,
    {
      "weight": 10,
      "element": {
        "location": "hbs_challenge_temple:challenge_room_4x4_00",
        "processors": "minecraft:empty",
        "projection": "rigid",
        "element_type": "minecraft:single_pool_element"
      }
    }

keep notes
---

CHALLENGES
---


Tutorial temple always first
Maze in lava with wooden planks
Short hop - place blocks as you land tech
Water bucket clutch 
Train goes around in circles, get in, get out
Frost Walker boots
Parkool boots
Skinny bridge + skeletons
1D parkour

Challenges:
Redstone Basics I - build T flip flop
Redstone Basics II - build alternating signal with pistons
RBIII - 1x2, 2x2, 3x3 piston door
Use arrows to shoot through the doors!

Skeleton run I, II, III
Creeper run - dig down through dirt with creepers, then stone
Spider run - climb ladders 
Zombie run - flat area with holes in it, give zombies knock back swords,

Create mechanics:
Belts
Maximize stress units

Need custom script capabilities
Need ability to make alternate shrines for same theme

Dog park - make a cute lil dog park, have to kill a dog for the key, he is sitting on wooden pressure plate, other dogs get mad at you

Mans best friend - dog travels in parallel track, defend him from mobs with arrows

Bar brawl - design a cute tavern with a bunch of wacky characters that all fight each other 

Can we make challenge gravel slide on ice like sand falls?

Chat GPT auto generate me pokemon style puzzles

Four swords - choose between four elemental swords, progress between four elemental challenges
- fire, knockback, frost?, bane of arth

Temple run - run straight, portals teleport you so you run in a straight line

Farm hand
- sheer sheep in a mountain themed temple, with goats
- milk cows 
- kill pigs - cooked pork chops worth 2
- automated farm hand, build create contraption to automate milk
- egg cannon


Junkyard - give the player completely random items, see if they can make it to the top
- Or give them existing create machines that must be repirposed

Angry birds - kill zombies, create gantry shaft and vanilla TnT cannon, wireless redstone, pressure plates

Mountain miner - build create railroad that breaks blocks, follows track
- put deployers on their train
- put drills
- hop off train to flip switch
- use dispensers to shoot arrows


Early Game speed run

Target practice - just arrows and floating targets, wireless redstone

End chest to transfer items to yourself

Make Your own maze- navigate through a maze with invisible brick

RewardsClass: normal, rare, epic, none
SpecificRewards: specify items guaranteed to be in the rewards chest
keepChest - new item added by the mod, any item in this chest will be kept by the player after they exit the shrine, config takes a list of items to put in the chest.

Challenge blocks:
Challenge_brick - cannot be broken, moved, blasted
 altered or destroyed, bedrock with stone brick skin
Challenge_glass - cannot be altered, glass textured
Challenge stone - cannot be broken, but can be blasted or moved
Challenge_wood - can be blasted or burned
Challenge_leaves - can be burned, not broken by hand

Challenge_tank - emits redstone signal when filled with sufficient fluid
Challenge_chest - emits redstone signal when filled with sufficient items

challenge_cobble - can be mined, does not drop anything
challenge_ladder - cannot be mined, or exploded
challenge_door
faux brick not burnable





CUT PASTE
---


//cut
    public void startWatchChallengers()
    {
        if( watchChallengersThread != null ) // Stop the previous thread if it's still running
            return;

        //We need to save this thread in a variable so we can interrupt it on shutdown
        this.watchChallengersThread = new Thread( this::threadWatchChallengers);
        this.watchChallengersThread.start();
    }

void threadWatchChallengers()
    {
        try {
            while (true)
            {
                Vec3i p = entityPos;
                nearPlayers.clear();
                int dist = 16;
                List<? extends Player> players = this.level.getNearbyPlayers(
                    TargetingConditions.forNonCombat().range(128),
                    null,
                    new AABB(
                        p.getX() - dist, p.getY() - dist, p.getZ() - dist,
                        p.getX() + dist, p.getY() + dist, p.getZ() + dist
                    )
                );
                players.stream()
                    .filter(p1 -> p1 instanceof ServerPlayer)
                    .map(p1 -> (ServerPlayer) p1)
                    .forEach(nearPlayers::add);
                Thread.sleep(1000); // Sleep for 100 milliseconds
            }
        } catch (InterruptedException e) {
            // Thread was interrupted, exit the loop
    }


    }






  if(isClose) {
            this.startWatchChallengers();
        }
        else {
            if( this.watchChallengersThread != null && this.watchChallengersThread.isAlive())
                this.watchChallengersThread.interrupt();
            this.watchChallengersThread = null;
        }

