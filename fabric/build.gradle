plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'java'
    id 'idea'
    id 'maven-publish'
}
base {
    version="${mod_version}"
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(":common")
    modImplementation ("net.blay09.mods:balm-fabric:${balm_version}") {
        transitive = false
    }

    modImplementation ("com.holybuckets.foundation:HBs_Foundation-fabric-${minecraft_version}:${foundation_version}") {
        transitive = false
        changing = true
    }

    modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:${immptl_version_fabric}")
    modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:${immptl_version_fabric}")
    modImplementation ("com.github.iPortalTeam.ImmersivePortalsMod:build:${immptl_version_fabric}")

    modImplementation ("maven.modrinth:universal-graves:${ugraves_version}")

    //universal graves dependencies
    modImplementation include("eu.pb4:sgui:1.2.2+1.20")
    modImplementation include("eu.pb4:placeholder-api:2.1.3+1.20.1")
    modImplementation include('xyz.nucleoid:server-translations-api:2.0.0+1.20')
    modImplementation include('eu.pb4:polymer-core:0.5.19+1.20.1')
    modImplementation include('eu.pb4:polymer-resource-pack:0.5.19+1.20.1')
    modImplementation include('eu.pb4:polymer-virtual-entity:0.5.19+1.20.1')
    modImplementation include('eu.pb4:predicate-api:0.2.1+1.20.1')
    modImplementation include("eu.pb4:common-protection-api:1.0.0")

    modImplementation include("me.lucko:fabric-permissions-api:0.2-SNAPSHOT")

    modCompileOnly "io.wispforest:accessories-fabric:1.0.0-beta.26+1.20.1"
    modCompileOnly "dev.emi:trinkets:3.0.4"
    //modCompileOnly "modrinth.maven:trinkets:3.0.4"
    modCompileOnly files("modsWithCompat/inventorio-1.17-fabric-1.6.2.jar")

    modCompileOnly "draylar:get-off-my-lawn:1.17-1.4.0-beta"
    modCompileOnly 'com.jamieswhiteshirt:rtree-3i-lite:0.3.0'
    modCompileOnly "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:3.0.0-nightly.21w19a"
    annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-rc.1")
    modCompileOnly("com.terraformersmc:modmenu:7.2.2")
    modLocalRuntime("com.terraformersmc:modmenu:7.2.2")

}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            programArgs "--username", "Dev"
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            name = "flatDirRelease"
            url = uri("${rootProject.findProperty("release_dir") ?: "$buildDir/published"}")
            metadataSources {
                artifact()
            }
        }
    }
}